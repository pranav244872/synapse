package main

import (
	"context"
	"flag"
	"log"

	"github.com/pranav244872/synapse/config" // Load app configuration
	"github.com/pranav244872/synapse/db/sqlc" // SQL queries generated by sqlc
	"github.com/pranav244872/synapse/util"    // Utility functions (e.g., password hashing)

	"github.com/jackc/pgx/v5/pgxpool" // PostgreSQL connection pool
	"github.com/jackc/pgx/v5/pgtype"  // PostgreSQL types
)

///////////////////////////////////////////////
// Main function to create an admin user via CLI
///////////////////////////////////////////////
func main() {
	// 1. Define and parse command-line flags
	name := flag.String("name", "", "Admin's full name")
	email := flag.String("email", "", "Admin's email address")
	password := flag.String("password", "", "Admin's password")
	flag.Parse()

	// Validate input
	if *name == "" || *email == "" || *password == "" {
		log.Fatal("❌ All fields (--name, --email, --password) are required.")
	}

	// 2. Load configuration and connect to database
	cfg, err := config.LoadConfig(".")
	if err != nil {
		log.Fatalf("❌ cannot load config: %v", err)
	}

	connPool, err := pgxpool.New(context.Background(), cfg.DBSource)
	if err != nil {
		log.Fatalf("❌ cannot connect to db: %v", err)
	}
	defer connPool.Close()

	queries := db.New(connPool)

	// 3. Hash the password before storing
	hashedPassword, err := util.HashPassword(*password)
	if err != nil {
		log.Fatalf("❌ failed to hash password: %v", err)
	}

	// 4. Create the admin user in the database
	user, err := queries.CreateUser(context.Background(), db.CreateUserParams{
		Name: pgtype.Text{
			String: *name,
			Valid:  true,
		},
		Email:        *email,
		PasswordHash: hashedPassword,
		Role:         db.UserRoleAdmin, // Role is set to "admin"
	})
	if err != nil {
		log.Fatalf("❌ failed to create admin user: %v", err)
	}

	// 5. Log the result
	log.Printf("✅ Admin user '%s' created successfully with ID %d\n", user.Name.String, user.ID)
}
