// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_skill.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSkillToUser = `-- name: AddSkillToUser :one

INSERT INTO user_skills (
    user_id,
    skill_id,
    proficiency
) VALUES (
    $1, $2, $3
) RETURNING user_id, skill_id, proficiency
`

type AddSkillToUserParams struct {
	UserID      int64
	SkillID     int64
	Proficiency ProficiencyLevel
}

// SQLC-formatted queries for the "user_skills" junction table.
// These follow the conventions for use with the sqlc tool.
// Adds a skill to a user with a specified proficiency level.
func (q *Queries) AddSkillToUser(ctx context.Context, arg AddSkillToUserParams) (UserSkill, error) {
	row := q.db.QueryRow(ctx, addSkillToUser, arg.UserID, arg.SkillID, arg.Proficiency)
	var i UserSkill
	err := row.Scan(&i.UserID, &i.SkillID, &i.Proficiency)
	return i, err
}

const getSkillsForUser = `-- name: GetSkillsForUser :many
SELECT s.id, s.skill_name, us.proficiency FROM skills s
JOIN user_skills us ON s.id = us.skill_id
WHERE us.user_id = $1
`

type GetSkillsForUserRow struct {
	ID          int64
	SkillName   string
	Proficiency ProficiencyLevel
}

// Retrieves all skills and proficiency levels for a specific user.
// This joins with the skills table to get the skill details.
func (q *Queries) GetSkillsForUser(ctx context.Context, userID int64) ([]GetSkillsForUserRow, error) {
	rows, err := q.db.Query(ctx, getSkillsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSkillsForUserRow
	for rows.Next() {
		var i GetSkillsForUserRow
		if err := rows.Scan(&i.ID, &i.SkillName, &i.Proficiency); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithSkill = `-- name: GetUsersWithSkill :many
SELECT u.id, u.name, u.email, us.proficiency FROM users u
JOIN user_skills us ON u.id = us.user_id
WHERE us.skill_id = $1
`

type GetUsersWithSkillRow struct {
	ID          int64
	Name        pgtype.Text
	Email       string
	Proficiency ProficiencyLevel
}

// Retrieves all users who have a specific skill, along with their proficiency.
// This joins with the users table to get user details.
func (q *Queries) GetUsersWithSkill(ctx context.Context, skillID int64) ([]GetUsersWithSkillRow, error) {
	rows, err := q.db.Query(ctx, getUsersWithSkill, skillID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithSkillRow
	for rows.Next() {
		var i GetUsersWithSkillRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Proficiency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSkillFromUser = `-- name: RemoveSkillFromUser :exec
DELETE FROM user_skills
WHERE user_id = $1 AND skill_id = $2
`

type RemoveSkillFromUserParams struct {
	UserID  int64
	SkillID int64
}

// Removes a skill from a user.
func (q *Queries) RemoveSkillFromUser(ctx context.Context, arg RemoveSkillFromUserParams) error {
	_, err := q.db.Exec(ctx, removeSkillFromUser, arg.UserID, arg.SkillID)
	return err
}

const updateUserSkillProficiency = `-- name: UpdateUserSkillProficiency :one
UPDATE user_skills
SET proficiency = $3
WHERE user_id = $1 AND skill_id = $2
RETURNING user_id, skill_id, proficiency
`

type UpdateUserSkillProficiencyParams struct {
	UserID      int64
	SkillID     int64
	Proficiency ProficiencyLevel
}

// Updates a user's proficiency level for a specific skill.
func (q *Queries) UpdateUserSkillProficiency(ctx context.Context, arg UpdateUserSkillProficiencyParams) (UserSkill, error) {
	row := q.db.QueryRow(ctx, updateUserSkillProficiency, arg.UserID, arg.SkillID, arg.Proficiency)
	var i UserSkill
	err := row.Scan(&i.UserID, &i.SkillID, &i.Proficiency)
	return i, err
}
