// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    name,
    email,
    team_id,
	password_hash,
	role
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, email, team_id, availability, password_hash, role
`

type CreateUserParams struct {
	Name         pgtype.Text
	Email        string
	TeamID       pgtype.Int8
	PasswordHash string
	Role         UserRole
}

// SQLC-formatted queries for the "users" table.
// These follow the conventions for use with the sqlc tool.
// Inserts a new user into the users table.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.TeamID,
		arg.PasswordHash,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Deletes a user from the database by their ID.
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, team_id, availability, password_hash, role FROM users
WHERE id = $1 LIMIT 1
`

// Retrieves a single user by their unique ID.
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, team_id, availability, password_hash, role FROM users
WHERE email = $1 LIMIT 1
`

// Retrieves a single user by their unique email address.
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, team_id, availability, password_hash, role FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

// Retrieves a paginated list of all users, ordered by ID.
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.TeamID,
			&i.Availability,
			&i.PasswordHash,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByTeam = `-- name: ListUsersByTeam :many
SELECT id, name, email, team_id, availability, password_hash, role FROM users
WHERE team_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUsersByTeamParams struct {
	TeamID pgtype.Int8
	Limit  int32
	Offset int32
}

// Retrieves a paginated list of all users belonging to a specific team.
func (q *Queries) ListUsersByTeam(ctx context.Context, arg ListUsersByTeamParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByTeam, arg.TeamID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.TeamID,
			&i.Availability,
			&i.PasswordHash,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name = coalesce($1, name),
    team_id = coalesce($2, team_id),
    availability = coalesce($3, availability),
	role = coalesce($4, role)
WHERE id = $5
RETURNING id, name, email, team_id, availability, password_hash, role
`

type UpdateUserParams struct {
	Name         pgtype.Text
	TeamID       pgtype.Int8
	Availability NullAvailabilityStatus
	Role         NullUserRole
	ID           int64
}

// Updates the details of a specific user.
// Uses sqlc.narg() to allow for partial updates. Only non-NULL arguments will be used to update fields.
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.TeamID,
		arg.Availability,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}
