// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countSearchUsers = `-- name: CountSearchUsers :one
SELECT count(*) FROM users 
WHERE (
    $1::text = '' OR 
    LOWER(name) LIKE LOWER($1) OR 
    LOWER(email) LIKE LOWER($1)
)
AND (
    $2::text = '' OR 
    role = $2::user_role
)
`

type CountSearchUsersParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
}

// Counts users whose name or email matches a search string and optionally filters by role
func (q *Queries) CountSearchUsers(ctx context.Context, arg CountSearchUsersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSearchUsers, arg.Column1, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM users
`

// Counts the total number of users in the users table
func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    name,
    email,
    team_id,
	password_hash,
	role
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, email, team_id, availability, password_hash, role
`

type CreateUserParams struct {
	Name         pgtype.Text `json:"name"`
	Email        string      `json:"email"`
	TeamID       pgtype.Int8 `json:"team_id"`
	PasswordHash string      `json:"password_hash"`
	Role         UserRole    `json:"role"`
}

// SQLC-formatted queries for the "users" table.
// These follow the conventions for use with the sqlc tool.
// Inserts a new user into the users table.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.TeamID,
		arg.PasswordHash,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Deletes a user from the database by their ID.
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, team_id, availability, password_hash, role FROM users
WHERE id = $1 LIMIT 1
`

// Retrieves a single user by their unique ID.
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, team_id, availability, password_hash, role FROM users
WHERE email = $1 LIMIT 1
`

// Retrieves a single user by their unique email address.
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const getUserSkillsForAdmin = `-- name: GetUserSkillsForAdmin :many
SELECT s.id, s.skill_name, us.proficiency
FROM user_skills us
JOIN skills s ON us.skill_id = s.id
WHERE us.user_id = $1
ORDER BY s.skill_name
`

type GetUserSkillsForAdminRow struct {
	ID          int64            `json:"id"`
	SkillName   string           `json:"skill_name"`
	Proficiency ProficiencyLevel `json:"proficiency"`
}

// Retrieves all skills and proficiency levels for a specific user, ordered by skill name
func (q *Queries) GetUserSkillsForAdmin(ctx context.Context, userID int64) ([]GetUserSkillsForAdminRow, error) {
	rows, err := q.db.Query(ctx, getUserSkillsForAdmin, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSkillsForAdminRow
	for rows.Next() {
		var i GetUserSkillsForAdminRow
		if err := rows.Scan(&i.ID, &i.SkillName, &i.Proficiency); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithTeamAndSkills = `-- name: GetUserWithTeamAndSkills :one
SELECT u.id, u.name, u.email, u.role, u.team_id, u.availability,
       t.team_name
FROM users u
LEFT JOIN teams t ON u.team_id = t.id
WHERE u.id = $1
`

type GetUserWithTeamAndSkillsRow struct {
	ID           int64              `json:"id"`
	Name         pgtype.Text        `json:"name"`
	Email        string             `json:"email"`
	Role         UserRole           `json:"role"`
	TeamID       pgtype.Int8        `json:"team_id"`
	Availability AvailabilityStatus `json:"availability"`
	TeamName     pgtype.Text        `json:"team_name"`
}

// Gets a specific user's details along with their team name
func (q *Queries) GetUserWithTeamAndSkills(ctx context.Context, id int64) (GetUserWithTeamAndSkillsRow, error) {
	row := q.db.QueryRow(ctx, getUserWithTeamAndSkills, id)
	var i GetUserWithTeamAndSkillsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.TeamID,
		&i.Availability,
		&i.TeamName,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, team_id, availability, password_hash, role FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Retrieves a paginated list of all users, ordered by ID.
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.TeamID,
			&i.Availability,
			&i.PasswordHash,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByTeam = `-- name: ListUsersByTeam :many
SELECT id, name, email, team_id, availability, password_hash, role FROM users
WHERE team_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUsersByTeamParams struct {
	TeamID pgtype.Int8 `json:"team_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

// Retrieves a paginated list of all users belonging to a specific team.
func (q *Queries) ListUsersByTeam(ctx context.Context, arg ListUsersByTeamParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByTeam, arg.TeamID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.TeamID,
			&i.Availability,
			&i.PasswordHash,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromTeam = `-- name: RemoveUserFromTeam :one
UPDATE users
SET team_id = NULL
WHERE id = $1
RETURNING id, name, email, team_id, availability, password_hash, role
`

func (q *Queries) RemoveUserFromTeam(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, removeUserFromTeam, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const searchUsers = `-- name: SearchUsers :many
SELECT u.id, u.name, u.email, u.role, u.team_id, u.availability,
       t.team_name
FROM users u
LEFT JOIN teams t ON u.team_id = t.id
WHERE (
    $1::text = '' OR 
    LOWER(u.name) LIKE LOWER($1) OR 
    LOWER(u.email) LIKE LOWER($1)
)
AND (
    $2::text = '' OR 
    u.role = $2::user_role
)
ORDER BY u.id
LIMIT $3 OFFSET $4
`

type SearchUsersParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type SearchUsersRow struct {
	ID           int64              `json:"id"`
	Name         pgtype.Text        `json:"name"`
	Email        string             `json:"email"`
	Role         UserRole           `json:"role"`
	TeamID       pgtype.Int8        `json:"team_id"`
	Availability AvailabilityStatus `json:"availability"`
	TeamName     pgtype.Text        `json:"team_name"`
}

// Retrieves a paginated list of users with team names, filtered by search string and optional role
func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]SearchUsersRow, error) {
	rows, err := q.db.Query(ctx, searchUsers,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchUsersRow
	for rows.Next() {
		var i SearchUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.TeamID,
			&i.Availability,
			&i.TeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name = coalesce($1, name),
    team_id = coalesce($2, team_id),
    availability = coalesce($3, availability),
	role = coalesce($4, role)
WHERE id = $5
RETURNING id, name, email, team_id, availability, password_hash, role
`

type UpdateUserParams struct {
	Name         pgtype.Text            `json:"name"`
	TeamID       pgtype.Int8            `json:"team_id"`
	Availability NullAvailabilityStatus `json:"availability"`
	Role         NullUserRole           `json:"role"`
	ID           int64                  `json:"id"`
}

// Updates the details of a specific user.
// Uses sqlc.narg() to allow for partial updates. Only non-NULL arguments will be used to update fields.
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.TeamID,
		arg.Availability,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET role = $2
WHERE id = $1
RETURNING id, name, email, team_id, availability, password_hash, role
`

type UpdateUserRoleParams struct {
	ID   int64    `json:"id"`
	Role UserRole `json:"role"`
}

// Updates the role of a user and returns their updated information
func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserRole, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const updateUserTeam = `-- name: UpdateUserTeam :one
UPDATE users
SET team_id = $2
WHERE id = $1
RETURNING id, name, email, team_id, availability, password_hash, role
`

type UpdateUserTeamParams struct {
	ID     int64       `json:"id"`
	TeamID pgtype.Int8 `json:"team_id"`
}

// Updates the team assignment of a user and returns their updated information
func (q *Queries) UpdateUserTeam(ctx context.Context, arg UpdateUserTeamParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserTeam, arg.ID, arg.TeamID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.TeamID,
		&i.Availability,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}
