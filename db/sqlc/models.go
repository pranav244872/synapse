// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AvailabilityStatus string

const (
	AvailabilityStatusAvailable AvailabilityStatus = "available"
	AvailabilityStatusBusy      AvailabilityStatus = "busy"
)

func (e *AvailabilityStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AvailabilityStatus(s)
	case string:
		*e = AvailabilityStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AvailabilityStatus: %T", src)
	}
	return nil
}

type NullAvailabilityStatus struct {
	AvailabilityStatus AvailabilityStatus `json:"availability_status"`
	Valid              bool               `json:"valid"` // Valid is true if AvailabilityStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAvailabilityStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AvailabilityStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AvailabilityStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAvailabilityStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AvailabilityStatus), nil
}

type ProficiencyLevel string

const (
	ProficiencyLevelBeginner     ProficiencyLevel = "beginner"
	ProficiencyLevelIntermediate ProficiencyLevel = "intermediate"
	ProficiencyLevelExpert       ProficiencyLevel = "expert"
)

func (e *ProficiencyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProficiencyLevel(s)
	case string:
		*e = ProficiencyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ProficiencyLevel: %T", src)
	}
	return nil
}

type NullProficiencyLevel struct {
	ProficiencyLevel ProficiencyLevel `json:"proficiency_level"`
	Valid            bool             `json:"valid"` // Valid is true if ProficiencyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProficiencyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ProficiencyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProficiencyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProficiencyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProficiencyLevel), nil
}

type TaskPriority string

const (
	TaskPriorityLow      TaskPriority = "low"
	TaskPriorityMedium   TaskPriority = "medium"
	TaskPriorityHigh     TaskPriority = "high"
	TaskPriorityCritical TaskPriority = "critical"
)

func (e *TaskPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskPriority(s)
	case string:
		*e = TaskPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskPriority: %T", src)
	}
	return nil
}

type NullTaskPriority struct {
	TaskPriority TaskPriority `json:"task_priority"`
	Valid        bool         `json:"valid"` // Valid is true if TaskPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskPriority) Scan(value interface{}) error {
	if value == nil {
		ns.TaskPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskPriority), nil
}

type TaskStatus string

const (
	TaskStatusOpen       TaskStatus = "open"
	TaskStatusInProgress TaskStatus = "in_progress"
	TaskStatusDone       TaskStatus = "done"
)

func (e *TaskStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskStatus(s)
	case string:
		*e = TaskStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskStatus: %T", src)
	}
	return nil
}

type NullTaskStatus struct {
	TaskStatus TaskStatus `json:"task_status"`
	Valid      bool       `json:"valid"` // Valid is true if TaskStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TaskStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskStatus), nil
}

type UserRole string

const (
	UserRoleManager  UserRole = "manager"
	UserRoleEngineer UserRole = "engineer"
	UserRoleAdmin    UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Invitation struct {
	ID              int64            `json:"id"`
	Email           string           `json:"email"`
	InvitationToken string           `json:"invitation_token"`
	RoleToInvite    UserRole         `json:"role_to_invite"`
	InviterID       int64            `json:"inviter_id"`
	Status          string           `json:"status"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
	ExpiresAt       pgtype.Timestamp `json:"expires_at"`
	TeamID          pgtype.Int8      `json:"team_id"`
}

// Provides context and grouping for related tasks.
type Project struct {
	ID          int64       `json:"id"`
	ProjectName string      `json:"project_name"`
	TeamID      int64       `json:"team_id"`
	Description pgtype.Text `json:"description"`
}

// Controlled vocabulary to ensure consistency across the system.
type Skill struct {
	ID         int64  `json:"id"`
	SkillName  string `json:"skill_name"`
	IsVerified bool   `json:"is_verified"`
}

// Maps alternative names or synonyms to a canonical skill in the skills table. Used by LLM to normalize task requirements.
type SkillAlias struct {
	AliasName string `json:"alias_name"`
	SkillID   int64  `json:"skill_id"`
}

// Core transactional unit. Used by ML engine to recommend assignments.
type Task struct {
	ID          int64            `json:"id"`
	ProjectID   pgtype.Int8      `json:"project_id"`
	Title       string           `json:"title"`
	Description pgtype.Text      `json:"description"`
	Status      TaskStatus       `json:"status"`
	Priority    TaskPriority     `json:"priority"`
	AssigneeID  pgtype.Int8      `json:"assignee_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	CompletedAt pgtype.Timestamp `json:"completed_at"`
}

// Populated by NLP. Defines what skills are needed for each task.
type TaskRequiredSkill struct {
	TaskID  int64 `json:"task_id"`
	SkillID int64 `json:"skill_id"`
}

// Teams provide organizational context and allow filtering of users.
type Team struct {
	ID        int64       `json:"id"`
	TeamName  string      `json:"team_name"`
	ManagerID pgtype.Int8 `json:"manager_id"`
}

// The central entity representing talent. Availability is essential for task assignment.
type User struct {
	ID           int64              `json:"id"`
	Name         pgtype.Text        `json:"name"`
	Email        string             `json:"email"`
	TeamID       pgtype.Int8        `json:"team_id"`
	Availability AvailabilityStatus `json:"availability"`
	PasswordHash string             `json:"password_hash"`
	Role         UserRole           `json:"role"`
}

// Defines each user's skill level for matching with task requirements.
type UserSkill struct {
	UserID      int64            `json:"user_id"`
	SkillID     int64            `json:"skill_id"`
	Proficiency ProficiencyLevel `json:"proficiency"`
}
