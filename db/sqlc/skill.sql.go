// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: skill.sql

package db

import (
	"context"
)

const createSkill = `-- name: CreateSkill :one

INSERT INTO skills (
    skill_name,
    is_verified
) VALUES (
    $1, $2
) RETURNING id, skill_name, is_verified
`

type CreateSkillParams struct {
	SkillName  string
	IsVerified bool
}

// SQLC-formatted queries for the "skills" table.
// These follow the conventions for use with the sqlc tool.
// Inserts a new skill into the skills table.
func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRow(ctx, createSkill, arg.SkillName, arg.IsVerified)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.IsVerified)
	return i, err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM skills
WHERE id = $1
`

// Deletes a skill from the database by its ID.
func (q *Queries) DeleteSkill(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSkill, id)
	return err
}

const getSkill = `-- name: GetSkill :one
SELECT id, skill_name, is_verified FROM skills
WHERE id = $1
LIMIT 1
`

// Retrieves a single skill by its unique ID.
func (q *Queries) GetSkill(ctx context.Context, id int64) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkill, id)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.IsVerified)
	return i, err
}

const getSkillByName = `-- name: GetSkillByName :one
SELECT id, skill_name, is_verified FROM skills
WHERE LOWER(skill_name) = LOWER($1)
LIMIT 1
`

// Retrieves a skill by its name (case-insensitive).
func (q *Queries) GetSkillByName(ctx context.Context, lower string) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkillByName, lower)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.IsVerified)
	return i, err
}

const listSkills = `-- name: ListSkills :many
SELECT id, skill_name, is_verified FROM skills
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSkillsParams struct {
	Limit  int32
	Offset int32
}

// Retrieves a paginated list of all skills, ordered by ID.
func (q *Queries) ListSkills(ctx context.Context, arg ListSkillsParams) ([]Skill, error) {
	rows, err := q.db.Query(ctx, listSkills, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.SkillName, &i.IsVerified); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :one
UPDATE skills
SET skill_name = $2
WHERE id = $1
RETURNING id, skill_name, is_verified
`

type UpdateSkillParams struct {
	ID        int64
	SkillName string
}

// Updates the name of a specific skill.
func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) (Skill, error) {
	row := q.db.QueryRow(ctx, updateSkill, arg.ID, arg.SkillName)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.IsVerified)
	return i, err
}

const updateSkillVerification = `-- name: UpdateSkillVerification :one
UPDATE skills
SET is_verified = $2
WHERE id = $1
RETURNING id, skill_name, is_verified
`

type UpdateSkillVerificationParams struct {
	ID         int64
	IsVerified bool
}

// Updates the is_verified status of a skill.
func (q *Queries) UpdateSkillVerification(ctx context.Context, arg UpdateSkillVerificationParams) (Skill, error) {
	row := q.db.QueryRow(ctx, updateSkillVerification, arg.ID, arg.IsVerified)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.IsVerified)
	return i, err
}
