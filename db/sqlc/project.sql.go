// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project.sql

package db

import (
	"context"
)

const createProject = `-- name: CreateProject :one

INSERT INTO projects (
    project_name
) VALUES (
    $1
) RETURNING id, project_name
`

// SQLC-formatted queries for the "projects" table.
// These follow the conventions for use with the sqlc tool.
// Inserts a new project into the projects table.
func (q *Queries) CreateProject(ctx context.Context, projectName string) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, projectName)
	var i Project
	err := row.Scan(&i.ID, &i.ProjectName)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

// Deletes a project from the database by its ID.
func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, project_name FROM projects
WHERE id = $1 LIMIT 1
`

// Retrieves a single project by its unique ID.
func (q *Queries) GetProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(&i.ID, &i.ProjectName)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, project_name FROM projects
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProjectsParams struct {
	Limit  int32
	Offset int32
}

// Retrieves a paginated list of all projects, ordered by ID.
func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.ProjectName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET project_name = $2
WHERE id = $1
RETURNING id, project_name
`

type UpdateProjectParams struct {
	ID          int64
	ProjectName string
}

// Updates the name of a specific project.
func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.ID, arg.ProjectName)
	var i Project
	err := row.Scan(&i.ID, &i.ProjectName)
	return i, err
}
