// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_required_skill.sql

package db

import (
	"context"
)

const addSkillToTask = `-- name: AddSkillToTask :one

INSERT INTO task_required_skills (
    task_id,
    skill_id
) VALUES (
    $1, $2
) RETURNING task_id, skill_id
`

type AddSkillToTaskParams struct {
	TaskID  int64
	SkillID int64
}

// SQLC-formatted queries for the "task_required_skills" junction table.
// These follow the conventions for use with the sqlc tool.
// Adds a required skill to a specific task.
func (q *Queries) AddSkillToTask(ctx context.Context, arg AddSkillToTaskParams) (TaskRequiredSkill, error) {
	row := q.db.QueryRow(ctx, addSkillToTask, arg.TaskID, arg.SkillID)
	var i TaskRequiredSkill
	err := row.Scan(&i.TaskID, &i.SkillID)
	return i, err
}

const getSkillsForTask = `-- name: GetSkillsForTask :many
SELECT s.id, s.skill_name FROM skills s
JOIN task_required_skills trs ON s.id = trs.skill_id
WHERE trs.task_id = $1
`

// Retrieves all skills required for a specific task by joining with the skills table.
func (q *Queries) GetSkillsForTask(ctx context.Context, taskID int64) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getSkillsForTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.SkillName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksForSkill = `-- name: GetTasksForSkill :many
SELECT t.id, t.project_id, t.title, t.description, t.status, t.priority, t.assignee_id, t.created_at, t.completed_at FROM tasks t
JOIN task_required_skills trs ON t.id = trs.task_id
WHERE trs.skill_id = $1
`

// Retrieves all tasks that require a specific skill by joining with the tasks table.
func (q *Queries) GetTasksForSkill(ctx context.Context, skillID int64) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksForSkill, skillID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.AssigneeID,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSkillFromTask = `-- name: RemoveSkillFromTask :exec
DELETE FROM task_required_skills
WHERE task_id = $1 AND skill_id = $2
`

type RemoveSkillFromTaskParams struct {
	TaskID  int64
	SkillID int64
}

// Removes a required skill from a specific task.
func (q *Queries) RemoveSkillFromTask(ctx context.Context, arg RemoveSkillFromTaskParams) error {
	_, err := q.db.Exec(ctx, removeSkillFromTask, arg.TaskID, arg.SkillID)
	return err
}
