// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: skills_alias.sql

package db

import (
	"context"
)

const createSkillAlias = `-- name: CreateSkillAlias :one

INSERT INTO skill_aliases (
    alias_name,
    skill_id
) VALUES (
    $1, $2
) RETURNING alias_name, skill_id
`

type CreateSkillAliasParams struct {
	AliasName string `json:"alias_name"`
	SkillID   int64  `json:"skill_id"`
}

// SQLC-formatted queries for the "skill_aliases" table.
// These follow the conventions for use with the sqlc tool.
// Inserts a new skill alias and associates it with a canonical skill.
func (q *Queries) CreateSkillAlias(ctx context.Context, arg CreateSkillAliasParams) (SkillAlias, error) {
	row := q.db.QueryRow(ctx, createSkillAlias, arg.AliasName, arg.SkillID)
	var i SkillAlias
	err := row.Scan(&i.AliasName, &i.SkillID)
	return i, err
}

const deleteSkillAlias = `-- name: DeleteSkillAlias :exec
DELETE FROM skill_aliases
WHERE alias_name = $1
`

// Deletes a skill alias from the database by its name.
func (q *Queries) DeleteSkillAlias(ctx context.Context, aliasName string) error {
	_, err := q.db.Exec(ctx, deleteSkillAlias, aliasName)
	return err
}

const getAllSkillAliases = `-- name: GetAllSkillAliases :many
SELECT
    sa.alias_name,
    s.skill_name AS canonical_name
FROM
    skill_aliases sa
JOIN
    skills s ON sa.skill_id = s.id
`

type GetAllSkillAliasesRow struct {
	AliasName     string `json:"alias_name"`
	CanonicalName string `json:"canonical_name"`
}

// Retrieves all skill aliases
func (q *Queries) GetAllSkillAliases(ctx context.Context) ([]GetAllSkillAliasesRow, error) {
	rows, err := q.db.Query(ctx, getAllSkillAliases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSkillAliasesRow
	for rows.Next() {
		var i GetAllSkillAliasesRow
		if err := rows.Scan(&i.AliasName, &i.CanonicalName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSkillAlias = `-- name: GetSkillAlias :one
SELECT alias_name, skill_id FROM skill_aliases
WHERE alias_name = $1 LIMIT 1
`

// Retrieves a single skill alias by its name (primary key).
func (q *Queries) GetSkillAlias(ctx context.Context, aliasName string) (SkillAlias, error) {
	row := q.db.QueryRow(ctx, getSkillAlias, aliasName)
	var i SkillAlias
	err := row.Scan(&i.AliasName, &i.SkillID)
	return i, err
}

const listAliasesForSkill = `-- name: ListAliasesForSkill :many
SELECT alias_name, skill_id FROM skill_aliases
WHERE skill_id = $1
ORDER BY alias_name
`

// Retrieves all aliases associated with a specific canonical skill ID.
func (q *Queries) ListAliasesForSkill(ctx context.Context, skillID int64) ([]SkillAlias, error) {
	rows, err := q.db.Query(ctx, listAliasesForSkill, skillID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SkillAlias
	for rows.Next() {
		var i SkillAlias
		if err := rows.Scan(&i.AliasName, &i.SkillID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSkillAliases = `-- name: ListSkillAliases :many
SELECT alias_name, skill_id FROM skill_aliases
ORDER BY alias_name
LIMIT $1
OFFSET $2
`

type ListSkillAliasesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Retrieves a paginated list of all skill aliases, ordered by name.
func (q *Queries) ListSkillAliases(ctx context.Context, arg ListSkillAliasesParams) ([]SkillAlias, error) {
	rows, err := q.db.Query(ctx, listSkillAliases, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SkillAlias
	for rows.Next() {
		var i SkillAlias
		if err := rows.Scan(&i.AliasName, &i.SkillID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkillAlias = `-- name: UpdateSkillAlias :one
UPDATE skill_aliases
SET
    skill_id = $1
WHERE alias_name = $2
RETURNING alias_name, skill_id
`

type UpdateSkillAliasParams struct {
	SkillID   int64  `json:"skill_id"`
	AliasName string `json:"alias_name"`
}

// Updates the canonical skill a specific alias points to.
// It's uncommon to update an alias; re-mapping is the primary use case.
func (q *Queries) UpdateSkillAlias(ctx context.Context, arg UpdateSkillAliasParams) (SkillAlias, error) {
	row := q.db.QueryRow(ctx, updateSkillAlias, arg.SkillID, arg.AliasName)
	var i SkillAlias
	err := row.Scan(&i.AliasName, &i.SkillID)
	return i, err
}
