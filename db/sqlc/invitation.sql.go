// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: invitation.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvitation = `-- name: CreateInvitation :one

INSERT INTO invitations (
    email,
    invitation_token,
    role_to_invite,
    inviter_id,
    expires_at,
    team_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, email, invitation_token, role_to_invite, inviter_id, status, created_at, expires_at, team_id
`

type CreateInvitationParams struct {
	Email           string
	InvitationToken string
	RoleToInvite    UserRole
	InviterID       int64
	ExpiresAt       pgtype.Timestamp
	TeamID          pgtype.Int8
}

// SQLC-formatted queries for the "invitations" table.
// These follow the conventions for use with the sqlc tool.
// Inserts a new invitation record into the database, including the team association.
func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, createInvitation,
		arg.Email,
		arg.InvitationToken,
		arg.RoleToInvite,
		arg.InviterID,
		arg.ExpiresAt,
		arg.TeamID,
	)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.InvitationToken,
		&i.RoleToInvite,
		&i.InviterID,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TeamID,
	)
	return i, err
}

const getInvitationByEmail = `-- name: GetInvitationByEmail :one
SELECT id, email, invitation_token, role_to_invite, inviter_id, status, created_at, expires_at, team_id FROM invitations
WHERE
    email = $1
    AND status = 'pending'
LIMIT 1
`

// Retrieves a pending invitation for a given email to prevent sending duplicate invites.
func (q *Queries) GetInvitationByEmail(ctx context.Context, email string) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitationByEmail, email)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.InvitationToken,
		&i.RoleToInvite,
		&i.InviterID,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TeamID,
	)
	return i, err
}

const getInvitationByToken = `-- name: GetInvitationByToken :one
SELECT id, email, invitation_token, role_to_invite, inviter_id, status, created_at, expires_at, team_id FROM invitations
WHERE
    invitation_token = $1
    AND status = 'pending'
    AND expires_at > now()
LIMIT 1
`

// Retrieves a single, non-expired invitation by its unique token.
// The user will provide this token when they sign up.
func (q *Queries) GetInvitationByToken(ctx context.Context, invitationToken string) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitationByToken, invitationToken)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.InvitationToken,
		&i.RoleToInvite,
		&i.InviterID,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TeamID,
	)
	return i, err
}

const updateInvitationStatus = `-- name: UpdateInvitationStatus :one
UPDATE invitations
SET status = $2
WHERE id = $1
RETURNING id, email, invitation_token, role_to_invite, inviter_id, status, created_at, expires_at, team_id
`

type UpdateInvitationStatusParams struct {
	ID     int64
	Status string
}

// Updates the status of an invitation, for example, to 'accepted' after the user successfully registers.
func (q *Queries) UpdateInvitationStatus(ctx context.Context, arg UpdateInvitationStatusParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, updateInvitationStatus, arg.ID, arg.Status)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.InvitationToken,
		&i.RoleToInvite,
		&i.InviterID,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TeamID,
	)
	return i, err
}
