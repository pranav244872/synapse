// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: team.sql

package db

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one

INSERT INTO teams (
    team_name
) VALUES (
    $1
) RETURNING id, team_name
`

// SQLC-formatted queries for the "teams" table.
// These follow the conventions for use with the sqlc tool.
// Inserts a new team into the teams table.
func (q *Queries) CreateTeam(ctx context.Context, teamName string) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam, teamName)
	var i Team
	err := row.Scan(&i.ID, &i.TeamName)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE id = $1
`

// Deletes a team from the database by its ID.
func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, team_name FROM teams
WHERE id = $1 LIMIT 1
`

// Retrieves a single team by its unique ID.
func (q *Queries) GetTeam(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRow(ctx, getTeam, id)
	var i Team
	err := row.Scan(&i.ID, &i.TeamName)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, team_name FROM teams
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTeamsParams struct {
	Limit  int32
	Offset int32
}

// Retrieves a paginated list of all teams, ordered by ID.
func (q *Queries) ListTeams(ctx context.Context, arg ListTeamsParams) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(&i.ID, &i.TeamName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams
SET team_name = $2
WHERE id = $1
RETURNING id, team_name
`

type UpdateTeamParams struct {
	ID       int64
	TeamName string
}

// Updates the name of a specific team.
func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, updateTeam, arg.ID, arg.TeamName)
	var i Team
	err := row.Scan(&i.ID, &i.TeamName)
	return i, err
}
