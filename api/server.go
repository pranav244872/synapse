package api

import (
	"fmt"

	"github.com/pranav244872/synapse/config"
	db "github.com/pranav244872/synapse/db/sqlc"
	"github.com/pranav244872/synapse/token"
	"github.com/pranav244872/synapse/skillz"

	"github.com/gin-gonic/gin"
)

////////////////////////////////////////////////////////////////////////
// Server Struct - Core of the API Server
////////////////////////////////////////////////////////////////////////

// Server defines dependencies for running HTTP API server.
type Server struct {
	config          config.Config         // Configuration values from file or environment
	store           *db.Store              // Database access layer generated by sqlc
	tokenMaker      *token.JWTMaker       // JWT token generator/verifier
	skillzProcessor skillz.Processor      // Used to process skills (e.g., from resumes)
	router          *gin.Engine           // Gin engine that holds all routes and middleware
}

////////////////////////////////////////////////////////////////////////
// Server Constructor - Initializes all components
////////////////////////////////////////////////////////////////////////

// NewServer creates and returns a new Server instance.
// Sets up token handling, routing, DB access, and skill processor.
func NewServer(config config.Config, store *db.Store, skillzProcessor skillz.Processor) (*Server, error) {
	// Create the JWT token maker using a symmetric key
	tokenMaker, err := token.NewJWTMaker(config.TokenSymmetricKey)
	if err != nil {
		return nil, fmt.Errorf("cannot create token maker: %w", err)
	}

	// Construct the server with all dependencies
	server := &Server{
		config:          config,
		store:           store,
		tokenMaker:      tokenMaker,
		skillzProcessor: skillzProcessor,
	}

	// Register routes and middleware
	server.setupRouter()

	return server, nil
}

////////////////////////////////////////////////////////////////////////
// Route Setup - Public and Protected Endpoints
////////////////////////////////////////////////////////////////////////

// setupRouter defines the HTTP routes and applies middleware
func (server *Server) setupRouter() {
	// Create a Gin router with default middleware: logging and recovery
	router := gin.Default()

	// Create versioned route group: /api/v1
	apiV1 := router.Group("/api/v1")

	//////////////////////
	// Public Routes
	//////////////////////

	// Route for logging in (returns a JWT on success)
	apiV1.POST("/auth/login", server.loginUser)

	// Route for accepting invitations (doesn't require auth)
	apiV1.POST("/invitations/accept", server.acceptInvitation)

	//////////////////////
	// Protected Routes
	//////////////////////

	// Group that applies the JWT auth middleware to every route inside it
	authRoutes := apiV1.Group("/").Use(authMiddleware(server.tokenMaker))

	// Only authenticated users can create invitations
	authRoutes.POST("/invitations", server.createInvitation)

	// Save the configured router into the Server struct for use by Start()
	server.router = router
}

////////////////////////////////////////////////////////////////////////
// Server Start - Launches the HTTP Server
////////////////////////////////////////////////////////////////////////

// Start runs the server on the specified address (e.g. ":8080")
func (server *Server) Start(address string) error {
	return server.router.Run(address) // This blocks and listens for requests
}

////////////////////////////////////////////////////////////////////////
// Error Response Helper
////////////////////////////////////////////////////////////////////////

// errorResponse returns a simple JSON structure for error messages
// Example return: { "error": "user not found" }
func errorResponse(err error) gin.H {
	return gin.H{"error": err.Error()}
}
