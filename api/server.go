// api/server.go

package api

import (
	"fmt"

	"github.com/pranav244872/synapse/config"
	db "github.com/pranav244872/synapse/db/sqlc"
	"github.com/pranav244872/synapse/token"
	"github.com/pranav244872/synapse/skillz"

	"github.com/gin-gonic/gin"
)

////////////////////////////////////////////////////////////////////////
// Server Struct - Core of the API Server
////////////////////////////////////////////////////////////////////////

// Server defines dependencies for running HTTP API server.
type Server struct {
	config          config.Config         // Configuration values from file or environment
	store           *db.Store              // Database access layer generated by sqlc
	tokenMaker      *token.JWTMaker       // JWT token generator/verifier
	skillzProcessor skillz.Processor      // Used to process skills (e.g., from resumes)
	router          *gin.Engine           // Gin engine that holds all routes and middleware
}

////////////////////////////////////////////////////////////////////////
// Server Constructor - Initializes all components
////////////////////////////////////////////////////////////////////////

// NewServer creates and returns a new Server instance.
// Sets up token handling, routing, DB access, and skill processor.
func NewServer(config config.Config, store *db.Store, skillzProcessor skillz.Processor) (*Server, error) {
	// Create the JWT token maker using a symmetric key
	tokenMaker, err := token.NewJWTMaker(config.TokenSymmetricKey)
	if err != nil {
		return nil, fmt.Errorf("cannot create token maker: %w", err)
	}

	// Construct the server with all dependencies
	server := &Server{
		config:          config,
		store:           store,
		tokenMaker:      tokenMaker,
		skillzProcessor: skillzProcessor,
	}

	// Register routes and middleware
	server.setupRouter()

	return server, nil
}

////////////////////////////////////////////////////////////////////////
// Route Setup - Public and Protected Endpoints
////////////////////////////////////////////////////////////////////////

// setupRouter defines the HTTP routes and applies middleware
func (server *Server) setupRouter() {
	router := gin.Default()

	// Apply CORS Middleware first
	// This ensures CORS headers are set for all responses, including errors
	router.Use(server.CORSMiddleware())

	apiV1 := router.Group("/api/v1")

	// == Public Authentication Routes ==
	// Handlers are in `api/auth_handler.go`
	apiV1.POST("/auth/login", server.loginUser)
	apiV1.POST("/invitations/accept", server.acceptInvitation)

	// == Admin Routes ==
	// Protected by auth and admin middleware. Handlers are in `api/admin_handler.go`.
	adminRoutes := apiV1.Group("/admin")
	adminRoutes.Use(authMiddleware(server.tokenMaker), adminAuthMiddleware())
	{
        // Team Management
        adminRoutes.POST("/teams", server.createTeamAdmin)
        adminRoutes.GET("/teams", server.listTeams)

		// User Management
		adminRoutes.GET("/users", server.listUsersAdmin)
		adminRoutes.GET("/users/:id", server.getUserAdmin)
		adminRoutes.PATCH("/users/:id", server.updateUserAdmin)
		adminRoutes.DELETE("/users/:id", server.deleteUserAdmin)
		adminRoutes.GET("/users/:id/delete-impact", server.getUserDeletionImpact)

        // Invitation Management
        adminRoutes.POST("/invitations", server.createManagerInvitation)
        adminRoutes.GET("/invitations", server.listInvitations)
        adminRoutes.DELETE("/invitations/:id", server.deleteInvitation)

        // Skill Management
		adminRoutes.POST("/skills", server.createSkillAdmin)
        adminRoutes.GET("/skills", server.listSkillsAdmin)
        adminRoutes.PATCH("/skills/:id", server.updateSkillVerification)
        adminRoutes.DELETE("/skills/:id", server.deleteSkill)
        adminRoutes.POST("/skill-aliases", server.createSkillAlias)
		adminRoutes.GET("/skills/:id/aliases", server.listSkillAliases)
	}

	// == Manager Routes ==
	// Protected by auth and manager middleware. Handlers are in `api/manager_handler.go`.
	managerRoutes := apiV1.Group("/manager")
	managerRoutes.Use(authMiddleware(server.tokenMaker), managerAuthMiddleware())
	{
		// Dashboard and Team Management
		managerRoutes.GET("/dashboard/stats", server.getDashboardStats)
		managerRoutes.GET("/team/members", server.getTeamMembers)

		// Invitation Management
		managerRoutes.POST("/invitations", server.inviteEngineer)
		managerRoutes.GET("/invitations", server.listSentInvitations)
		managerRoutes.DELETE("/invitations/:id", server.cancelInvitation)

		// Project Management
		managerRoutes.POST("/projects", server.createProject)
		managerRoutes.GET("/projects", server.listProjects)  // Now includes task counts
		managerRoutes.GET("/projects/:id", server.getProject)
		managerRoutes.PUT("/projects/:id", server.updateProject)
		managerRoutes.POST("/projects/:id/archive", server.archiveProject)
		managerRoutes.GET("/projects/:id/tasks", server.listProjectTasks)  // NEW

		// Task Management
		managerRoutes.POST("/tasks", server.createTask)
		managerRoutes.PATCH("/tasks/:id", server.updateTask)  // NEW

		// Engineer Recommendations
		managerRoutes.POST("/recommendations", server.getRecommendations)
	}

    // == General Authenticated User Routes ==
    // Protected by auth middleware. Handlers are in `api/user_handler.go`.
    userRoutes := apiV1.Group("/users")
    userRoutes.Use(authMiddleware(server.tokenMaker))
    {
        userRoutes.GET("/me", server.getUserProfile)
    }

	server.router = router
}

////////////////////////////////////////////////////////////////////////
// Server Start - Launches the HTTP Server
////////////////////////////////////////////////////////////////////////

// Start runs the server on the specified address (e.g. ":8080")
func (server *Server) Start(address string) error {
	return server.router.Run(address) // This blocks and listens for requests
}

////////////////////////////////////////////////////////////////////////
// Error Response Helper
////////////////////////////////////////////////////////////////////////

// errorResponse returns a simple JSON structure for error messages
// Example return: { "error": "user not found" }
func errorResponse(err error) gin.H {
	return gin.H{"error": err.Error()}
}
